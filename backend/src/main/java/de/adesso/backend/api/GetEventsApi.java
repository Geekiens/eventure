/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12-1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.adesso.backend.api;

import de.adesso.backend.model.Event;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-05-02T11:27:47.656Z")

@Api(value = "getEvents", description = "the getEvents API")
public interface GetEventsApi {

    @ApiOperation(value = "Sucht alle Termine des Nutzers.", nickname = "getEvents", notes = "Diese Operation liefert alle passenden Events, die der eingeloggten Person zugeordnet werden.", response = Event.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Alle Events des Nutzers", response = Event.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/getEvents",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Event>> getEvents(@ApiParam(value = "Name des Sachbearbeiters") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "Vertragsnummer nach der gesucht werden soll") @Valid @RequestParam(value = "contractNumber", required = false) String contractNumber);

    @ApiOperation(value = "Sucht alle Termine fälligen des Nutzers.", nickname = "getDueEvents", notes = "Diese Operation liefert alle fälligen Events, die der eingeloggten Person zugeordnet werden.", response = Event.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Alle Events des Nutzers, die fällig sind (Fälligkeitsdatum überschritten und Status steht auf offen)", response = Event.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/getDueEvents",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Event>> getDueEvents(@ApiParam(value = "Name des Sachbearbeiters") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "Vertragsnummer nach der gesucht werden soll") @Valid @RequestParam(value = "contractNumber", required = false) String contractNumber);

}
